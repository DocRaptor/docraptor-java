/*
 * DocRaptor
 * A native client library for the DocRaptor HTML to PDF/XLS service.
 *
 * OpenAPI spec version: 2.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.docraptor;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * PrinceOptions
 */

public class PrinceOptions {
  @JsonProperty("baseurl")
  private String baseurl = null;

  @JsonProperty("no_xinclude")
  private Boolean noXinclude = null;

  @JsonProperty("no_network")
  private Boolean noNetwork = null;

  @JsonProperty("no_parallel_downloads")
  private Boolean noParallelDownloads = null;

  @JsonProperty("http_user")
  private String httpUser = null;

  @JsonProperty("http_password")
  private String httpPassword = null;

  @JsonProperty("http_proxy")
  private String httpProxy = null;

  @JsonProperty("http_timeout")
  private Integer httpTimeout = null;

  @JsonProperty("insecure")
  private Boolean insecure = null;

  @JsonProperty("media")
  private String media = "print";

  @JsonProperty("no_author_style")
  private Boolean noAuthorStyle = null;

  @JsonProperty("no_default_style")
  private Boolean noDefaultStyle = null;

  @JsonProperty("no_embed_fonts")
  private Boolean noEmbedFonts = null;

  @JsonProperty("no_subset_fonts")
  private Boolean noSubsetFonts = null;

  @JsonProperty("no_compress")
  private Boolean noCompress = null;

  @JsonProperty("encrypt")
  private Boolean encrypt = null;

  @JsonProperty("key_bits")
  private Integer keyBits = null;

  @JsonProperty("user_password")
  private String userPassword = null;

  @JsonProperty("owner_password")
  private String ownerPassword = null;

  @JsonProperty("disallow_print")
  private Boolean disallowPrint = null;

  @JsonProperty("disallow_copy")
  private Boolean disallowCopy = null;

  @JsonProperty("disallow_annotate")
  private Boolean disallowAnnotate = null;

  @JsonProperty("disallow_modify")
  private Boolean disallowModify = null;

  @JsonProperty("debug")
  private Boolean debug = null;

  /**
   * Specify the input format.
   */
  public enum InputEnum {
    HTML("html"),

    XML("xml"),

    AUTO("auto");

    private String value;

    InputEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static InputEnum fromValue(String text) {
      for (InputEnum b : InputEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("input")
  private InputEnum input = InputEnum.HTML;

  @JsonProperty("version")
  private String version = null;

  @JsonProperty("javascript")
  private Boolean javascript = null;

  @JsonProperty("css_dpi")
  private Integer cssDpi = null;

  @JsonProperty("profile")
  private String profile = null;

  @JsonProperty("pdf_title")
  private String pdfTitle = null;

  public PrinceOptions baseurl(String baseurl) {
    this.baseurl = baseurl;
    return this;
  }

   /**
   * Set the baseurl for assets.
   * @return baseurl
  **/
  @ApiModelProperty(value = "Set the baseurl for assets.")
  public String getBaseurl() {
    return baseurl;
  }

  public void setBaseurl(String baseurl) {
    this.baseurl = baseurl;
  }

  public PrinceOptions noXinclude(Boolean noXinclude) {
    this.noXinclude = noXinclude;
    return this;
  }

   /**
   * Disable XML inclusion.
   * @return noXinclude
  **/
  @ApiModelProperty(value = "Disable XML inclusion.")
  public Boolean isNoXinclude() {
    return noXinclude;
  }

  public void setNoXinclude(Boolean noXinclude) {
    this.noXinclude = noXinclude;
  }

  public PrinceOptions noNetwork(Boolean noNetwork) {
    this.noNetwork = noNetwork;
    return this;
  }

   /**
   * Disable network access.
   * @return noNetwork
  **/
  @ApiModelProperty(value = "Disable network access.")
  public Boolean isNoNetwork() {
    return noNetwork;
  }

  public void setNoNetwork(Boolean noNetwork) {
    this.noNetwork = noNetwork;
  }

  public PrinceOptions noParallelDownloads(Boolean noParallelDownloads) {
    this.noParallelDownloads = noParallelDownloads;
    return this;
  }

   /**
   * Disables parallel fetching of assets during PDF creation. Useful if your asset host has strict rate limiting.
   * @return noParallelDownloads
  **/
  @ApiModelProperty(value = "Disables parallel fetching of assets during PDF creation. Useful if your asset host has strict rate limiting.")
  public Boolean isNoParallelDownloads() {
    return noParallelDownloads;
  }

  public void setNoParallelDownloads(Boolean noParallelDownloads) {
    this.noParallelDownloads = noParallelDownloads;
  }

  public PrinceOptions httpUser(String httpUser) {
    this.httpUser = httpUser;
    return this;
  }

   /**
   * Set the user for HTTP authentication.
   * @return httpUser
  **/
  @ApiModelProperty(value = "Set the user for HTTP authentication.")
  public String getHttpUser() {
    return httpUser;
  }

  public void setHttpUser(String httpUser) {
    this.httpUser = httpUser;
  }

  public PrinceOptions httpPassword(String httpPassword) {
    this.httpPassword = httpPassword;
    return this;
  }

   /**
   * Set the password for HTTP authentication.
   * @return httpPassword
  **/
  @ApiModelProperty(value = "Set the password for HTTP authentication.")
  public String getHttpPassword() {
    return httpPassword;
  }

  public void setHttpPassword(String httpPassword) {
    this.httpPassword = httpPassword;
  }

  public PrinceOptions httpProxy(String httpProxy) {
    this.httpProxy = httpProxy;
    return this;
  }

   /**
   * Set the HTTP proxy server.
   * @return httpProxy
  **/
  @ApiModelProperty(value = "Set the HTTP proxy server.")
  public String getHttpProxy() {
    return httpProxy;
  }

  public void setHttpProxy(String httpProxy) {
    this.httpProxy = httpProxy;
  }

  public PrinceOptions httpTimeout(Integer httpTimeout) {
    this.httpTimeout = httpTimeout;
    return this;
  }

   /**
   * Set the HTTP request timeout.
   * @return httpTimeout
  **/
  @ApiModelProperty(value = "Set the HTTP request timeout.")
  public Integer getHttpTimeout() {
    return httpTimeout;
  }

  public void setHttpTimeout(Integer httpTimeout) {
    this.httpTimeout = httpTimeout;
  }

  public PrinceOptions insecure(Boolean insecure) {
    this.insecure = insecure;
    return this;
  }

   /**
   * Disable SSL verification.
   * @return insecure
  **/
  @ApiModelProperty(value = "Disable SSL verification.")
  public Boolean isInsecure() {
    return insecure;
  }

  public void setInsecure(Boolean insecure) {
    this.insecure = insecure;
  }

  public PrinceOptions media(String media) {
    this.media = media;
    return this;
  }

   /**
   * Specify the CSS media type. Defaults to \&quot;print\&quot; but you may want to use \&quot;screen\&quot; for web styles.
   * @return media
  **/
  @ApiModelProperty(value = "Specify the CSS media type. Defaults to \"print\" but you may want to use \"screen\" for web styles.")
  public String getMedia() {
    return media;
  }

  public void setMedia(String media) {
    this.media = media;
  }

  public PrinceOptions noAuthorStyle(Boolean noAuthorStyle) {
    this.noAuthorStyle = noAuthorStyle;
    return this;
  }

   /**
   * Ignore author stylesheets.
   * @return noAuthorStyle
  **/
  @ApiModelProperty(value = "Ignore author stylesheets.")
  public Boolean isNoAuthorStyle() {
    return noAuthorStyle;
  }

  public void setNoAuthorStyle(Boolean noAuthorStyle) {
    this.noAuthorStyle = noAuthorStyle;
  }

  public PrinceOptions noDefaultStyle(Boolean noDefaultStyle) {
    this.noDefaultStyle = noDefaultStyle;
    return this;
  }

   /**
   * Ignore default stylesheets.
   * @return noDefaultStyle
  **/
  @ApiModelProperty(value = "Ignore default stylesheets.")
  public Boolean isNoDefaultStyle() {
    return noDefaultStyle;
  }

  public void setNoDefaultStyle(Boolean noDefaultStyle) {
    this.noDefaultStyle = noDefaultStyle;
  }

  public PrinceOptions noEmbedFonts(Boolean noEmbedFonts) {
    this.noEmbedFonts = noEmbedFonts;
    return this;
  }

   /**
   * Disable font embedding in PDFs.
   * @return noEmbedFonts
  **/
  @ApiModelProperty(value = "Disable font embedding in PDFs.")
  public Boolean isNoEmbedFonts() {
    return noEmbedFonts;
  }

  public void setNoEmbedFonts(Boolean noEmbedFonts) {
    this.noEmbedFonts = noEmbedFonts;
  }

  public PrinceOptions noSubsetFonts(Boolean noSubsetFonts) {
    this.noSubsetFonts = noSubsetFonts;
    return this;
  }

   /**
   * Disable font subsetting in PDFs.
   * @return noSubsetFonts
  **/
  @ApiModelProperty(value = "Disable font subsetting in PDFs.")
  public Boolean isNoSubsetFonts() {
    return noSubsetFonts;
  }

  public void setNoSubsetFonts(Boolean noSubsetFonts) {
    this.noSubsetFonts = noSubsetFonts;
  }

  public PrinceOptions noCompress(Boolean noCompress) {
    this.noCompress = noCompress;
    return this;
  }

   /**
   * Disable PDF compression.
   * @return noCompress
  **/
  @ApiModelProperty(value = "Disable PDF compression.")
  public Boolean isNoCompress() {
    return noCompress;
  }

  public void setNoCompress(Boolean noCompress) {
    this.noCompress = noCompress;
  }

  public PrinceOptions encrypt(Boolean encrypt) {
    this.encrypt = encrypt;
    return this;
  }

   /**
   * Encrypt PDF output.
   * @return encrypt
  **/
  @ApiModelProperty(value = "Encrypt PDF output.")
  public Boolean isEncrypt() {
    return encrypt;
  }

  public void setEncrypt(Boolean encrypt) {
    this.encrypt = encrypt;
  }

  public PrinceOptions keyBits(Integer keyBits) {
    this.keyBits = keyBits;
    return this;
  }

   /**
   * Set encryption key size.
   * @return keyBits
  **/
  @ApiModelProperty(value = "Set encryption key size.")
  public Integer getKeyBits() {
    return keyBits;
  }

  public void setKeyBits(Integer keyBits) {
    this.keyBits = keyBits;
  }

  public PrinceOptions userPassword(String userPassword) {
    this.userPassword = userPassword;
    return this;
  }

   /**
   * Set the PDF user password.
   * @return userPassword
  **/
  @ApiModelProperty(value = "Set the PDF user password.")
  public String getUserPassword() {
    return userPassword;
  }

  public void setUserPassword(String userPassword) {
    this.userPassword = userPassword;
  }

  public PrinceOptions ownerPassword(String ownerPassword) {
    this.ownerPassword = ownerPassword;
    return this;
  }

   /**
   * Set the PDF owner password.
   * @return ownerPassword
  **/
  @ApiModelProperty(value = "Set the PDF owner password.")
  public String getOwnerPassword() {
    return ownerPassword;
  }

  public void setOwnerPassword(String ownerPassword) {
    this.ownerPassword = ownerPassword;
  }

  public PrinceOptions disallowPrint(Boolean disallowPrint) {
    this.disallowPrint = disallowPrint;
    return this;
  }

   /**
   * Disallow printing of this PDF.
   * @return disallowPrint
  **/
  @ApiModelProperty(value = "Disallow printing of this PDF.")
  public Boolean isDisallowPrint() {
    return disallowPrint;
  }

  public void setDisallowPrint(Boolean disallowPrint) {
    this.disallowPrint = disallowPrint;
  }

  public PrinceOptions disallowCopy(Boolean disallowCopy) {
    this.disallowCopy = disallowCopy;
    return this;
  }

   /**
   * Disallow copying of this PDF.
   * @return disallowCopy
  **/
  @ApiModelProperty(value = "Disallow copying of this PDF.")
  public Boolean isDisallowCopy() {
    return disallowCopy;
  }

  public void setDisallowCopy(Boolean disallowCopy) {
    this.disallowCopy = disallowCopy;
  }

  public PrinceOptions disallowAnnotate(Boolean disallowAnnotate) {
    this.disallowAnnotate = disallowAnnotate;
    return this;
  }

   /**
   * Disallow annotation of this PDF.
   * @return disallowAnnotate
  **/
  @ApiModelProperty(value = "Disallow annotation of this PDF.")
  public Boolean isDisallowAnnotate() {
    return disallowAnnotate;
  }

  public void setDisallowAnnotate(Boolean disallowAnnotate) {
    this.disallowAnnotate = disallowAnnotate;
  }

  public PrinceOptions disallowModify(Boolean disallowModify) {
    this.disallowModify = disallowModify;
    return this;
  }

   /**
   * Disallow modification of this PDF.
   * @return disallowModify
  **/
  @ApiModelProperty(value = "Disallow modification of this PDF.")
  public Boolean isDisallowModify() {
    return disallowModify;
  }

  public void setDisallowModify(Boolean disallowModify) {
    this.disallowModify = disallowModify;
  }

  public PrinceOptions debug(Boolean debug) {
    this.debug = debug;
    return this;
  }

   /**
   * Enable Prince debug mode.
   * @return debug
  **/
  @ApiModelProperty(value = "Enable Prince debug mode.")
  public Boolean isDebug() {
    return debug;
  }

  public void setDebug(Boolean debug) {
    this.debug = debug;
  }

  public PrinceOptions input(InputEnum input) {
    this.input = input;
    return this;
  }

   /**
   * Specify the input format.
   * @return input
  **/
  @ApiModelProperty(value = "Specify the input format.")
  public InputEnum getInput() {
    return input;
  }

  public void setInput(InputEnum input) {
    this.input = input;
  }

  public PrinceOptions version(String version) {
    this.version = version;
    return this;
  }

   /**
   * Deprecated, use the appropriate &#x60;pipeline&#x60; version. Specify a specific verison of PrinceXML to use.
   * @return version
  **/
  @ApiModelProperty(value = "Deprecated, use the appropriate `pipeline` version. Specify a specific verison of PrinceXML to use.")
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }

  public PrinceOptions javascript(Boolean javascript) {
    this.javascript = javascript;
    return this;
  }

   /**
   * Enable PrinceXML JavaScript. DocRaptor JavaScript parsing is also available elsewhere.
   * @return javascript
  **/
  @ApiModelProperty(value = "Enable PrinceXML JavaScript. DocRaptor JavaScript parsing is also available elsewhere.")
  public Boolean isJavascript() {
    return javascript;
  }

  public void setJavascript(Boolean javascript) {
    this.javascript = javascript;
  }

  public PrinceOptions cssDpi(Integer cssDpi) {
    this.cssDpi = cssDpi;
    return this;
  }

   /**
   * Set the DPI when rendering CSS. Defaults to 96 but can be set with Prince 9.0 and up.
   * @return cssDpi
  **/
  @ApiModelProperty(value = "Set the DPI when rendering CSS. Defaults to 96 but can be set with Prince 9.0 and up.")
  public Integer getCssDpi() {
    return cssDpi;
  }

  public void setCssDpi(Integer cssDpi) {
    this.cssDpi = cssDpi;
  }

  public PrinceOptions profile(String profile) {
    this.profile = profile;
    return this;
  }

   /**
   * In Prince 9.0 and up you can set the PDF profile.
   * @return profile
  **/
  @ApiModelProperty(value = "In Prince 9.0 and up you can set the PDF profile.")
  public String getProfile() {
    return profile;
  }

  public void setProfile(String profile) {
    this.profile = profile;
  }

  public PrinceOptions pdfTitle(String pdfTitle) {
    this.pdfTitle = pdfTitle;
    return this;
  }

   /**
   * Specify the PDF title, part of the document&#39;s metadata.
   * @return pdfTitle
  **/
  @ApiModelProperty(value = "Specify the PDF title, part of the document's metadata.")
  public String getPdfTitle() {
    return pdfTitle;
  }

  public void setPdfTitle(String pdfTitle) {
    this.pdfTitle = pdfTitle;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PrinceOptions princeOptions = (PrinceOptions) o;
    return Objects.equals(this.baseurl, princeOptions.baseurl) &&
        Objects.equals(this.noXinclude, princeOptions.noXinclude) &&
        Objects.equals(this.noNetwork, princeOptions.noNetwork) &&
        Objects.equals(this.noParallelDownloads, princeOptions.noParallelDownloads) &&
        Objects.equals(this.httpUser, princeOptions.httpUser) &&
        Objects.equals(this.httpPassword, princeOptions.httpPassword) &&
        Objects.equals(this.httpProxy, princeOptions.httpProxy) &&
        Objects.equals(this.httpTimeout, princeOptions.httpTimeout) &&
        Objects.equals(this.insecure, princeOptions.insecure) &&
        Objects.equals(this.media, princeOptions.media) &&
        Objects.equals(this.noAuthorStyle, princeOptions.noAuthorStyle) &&
        Objects.equals(this.noDefaultStyle, princeOptions.noDefaultStyle) &&
        Objects.equals(this.noEmbedFonts, princeOptions.noEmbedFonts) &&
        Objects.equals(this.noSubsetFonts, princeOptions.noSubsetFonts) &&
        Objects.equals(this.noCompress, princeOptions.noCompress) &&
        Objects.equals(this.encrypt, princeOptions.encrypt) &&
        Objects.equals(this.keyBits, princeOptions.keyBits) &&
        Objects.equals(this.userPassword, princeOptions.userPassword) &&
        Objects.equals(this.ownerPassword, princeOptions.ownerPassword) &&
        Objects.equals(this.disallowPrint, princeOptions.disallowPrint) &&
        Objects.equals(this.disallowCopy, princeOptions.disallowCopy) &&
        Objects.equals(this.disallowAnnotate, princeOptions.disallowAnnotate) &&
        Objects.equals(this.disallowModify, princeOptions.disallowModify) &&
        Objects.equals(this.debug, princeOptions.debug) &&
        Objects.equals(this.input, princeOptions.input) &&
        Objects.equals(this.version, princeOptions.version) &&
        Objects.equals(this.javascript, princeOptions.javascript) &&
        Objects.equals(this.cssDpi, princeOptions.cssDpi) &&
        Objects.equals(this.profile, princeOptions.profile) &&
        Objects.equals(this.pdfTitle, princeOptions.pdfTitle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseurl, noXinclude, noNetwork, noParallelDownloads, httpUser, httpPassword, httpProxy, httpTimeout, insecure, media, noAuthorStyle, noDefaultStyle, noEmbedFonts, noSubsetFonts, noCompress, encrypt, keyBits, userPassword, ownerPassword, disallowPrint, disallowCopy, disallowAnnotate, disallowModify, debug, input, version, javascript, cssDpi, profile, pdfTitle);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PrinceOptions {\n");

    sb.append("    baseurl: ").append(toIndentedString(baseurl)).append("\n");
    sb.append("    noXinclude: ").append(toIndentedString(noXinclude)).append("\n");
    sb.append("    noNetwork: ").append(toIndentedString(noNetwork)).append("\n");
    sb.append("    noParallelDownloads: ").append(toIndentedString(noParallelDownloads)).append("\n");
    sb.append("    httpUser: ").append(toIndentedString(httpUser)).append("\n");
    sb.append("    httpPassword: ").append(toIndentedString(httpPassword)).append("\n");
    sb.append("    httpProxy: ").append(toIndentedString(httpProxy)).append("\n");
    sb.append("    httpTimeout: ").append(toIndentedString(httpTimeout)).append("\n");
    sb.append("    insecure: ").append(toIndentedString(insecure)).append("\n");
    sb.append("    media: ").append(toIndentedString(media)).append("\n");
    sb.append("    noAuthorStyle: ").append(toIndentedString(noAuthorStyle)).append("\n");
    sb.append("    noDefaultStyle: ").append(toIndentedString(noDefaultStyle)).append("\n");
    sb.append("    noEmbedFonts: ").append(toIndentedString(noEmbedFonts)).append("\n");
    sb.append("    noSubsetFonts: ").append(toIndentedString(noSubsetFonts)).append("\n");
    sb.append("    noCompress: ").append(toIndentedString(noCompress)).append("\n");
    sb.append("    encrypt: ").append(toIndentedString(encrypt)).append("\n");
    sb.append("    keyBits: ").append(toIndentedString(keyBits)).append("\n");
    sb.append("    userPassword: ").append(toIndentedString(userPassword)).append("\n");
    sb.append("    ownerPassword: ").append(toIndentedString(ownerPassword)).append("\n");
    sb.append("    disallowPrint: ").append(toIndentedString(disallowPrint)).append("\n");
    sb.append("    disallowCopy: ").append(toIndentedString(disallowCopy)).append("\n");
    sb.append("    disallowAnnotate: ").append(toIndentedString(disallowAnnotate)).append("\n");
    sb.append("    disallowModify: ").append(toIndentedString(disallowModify)).append("\n");
    sb.append("    debug: ").append(toIndentedString(debug)).append("\n");
    sb.append("    input: ").append(toIndentedString(input)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    javascript: ").append(toIndentedString(javascript)).append("\n");
    sb.append("    cssDpi: ").append(toIndentedString(cssDpi)).append("\n");
    sb.append("    profile: ").append(toIndentedString(profile)).append("\n");
    sb.append("    pdfTitle: ").append(toIndentedString(pdfTitle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

