/*
 * DocRaptor
 * A native client library for the DocRaptor HTML to PDF/XLS service.
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docraptor;

import java.util.Objects;
import java.util.Arrays;
import com.docraptor.PrinceOptions;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Doc
 */
@JsonPropertyOrder({
  Doc.JSON_PROPERTY_NAME,
  Doc.JSON_PROPERTY_DOCUMENT_TYPE,
  Doc.JSON_PROPERTY_DOCUMENT_CONTENT,
  Doc.JSON_PROPERTY_DOCUMENT_URL,
  Doc.JSON_PROPERTY_TEST,
  Doc.JSON_PROPERTY_PIPELINE,
  Doc.JSON_PROPERTY_STRICT,
  Doc.JSON_PROPERTY_IGNORE_RESOURCE_ERRORS,
  Doc.JSON_PROPERTY_IGNORE_CONSOLE_MESSAGES,
  Doc.JSON_PROPERTY_TAG,
  Doc.JSON_PROPERTY_HELP,
  Doc.JSON_PROPERTY_JAVASCRIPT,
  Doc.JSON_PROPERTY_REFERRER,
  Doc.JSON_PROPERTY_CALLBACK_URL,
  Doc.JSON_PROPERTY_HOSTED_DOWNLOAD_LIMIT,
  Doc.JSON_PROPERTY_HOSTED_EXPIRES_AT,
  Doc.JSON_PROPERTY_PRINCE_OPTIONS,
  Doc.JSON_PROPERTY_USER_AGENT_TOKEN
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Doc {
  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  /**
   * The type of document being created.
   */
  public enum DocumentTypeEnum {
    PDF("pdf"),

    XLS("xls"),

    XLSX("xlsx");

    private String value;

    DocumentTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DocumentTypeEnum fromValue(String value) {
      for (DocumentTypeEnum b : DocumentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_DOCUMENT_TYPE = "document_type";
  private DocumentTypeEnum documentType;

  public static final String JSON_PROPERTY_DOCUMENT_CONTENT = "document_content";
  private String documentContent;

  public static final String JSON_PROPERTY_DOCUMENT_URL = "document_url";
  private String documentUrl;

  public static final String JSON_PROPERTY_TEST = "test";
  private Boolean test = true;

  public static final String JSON_PROPERTY_PIPELINE = "pipeline";
  private String pipeline;

  /**
   * Force strict HTML validation.
   */
  public enum StrictEnum {
    NONE("none"),

    HTML("html");

    private String value;

    StrictEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StrictEnum fromValue(String value) {
      for (StrictEnum b : StrictEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STRICT = "strict";
  private StrictEnum strict;

  public static final String JSON_PROPERTY_IGNORE_RESOURCE_ERRORS = "ignore_resource_errors";
  private Boolean ignoreResourceErrors = true;

  public static final String JSON_PROPERTY_IGNORE_CONSOLE_MESSAGES = "ignore_console_messages";
  private Boolean ignoreConsoleMessages = false;

  public static final String JSON_PROPERTY_TAG = "tag";
  private String tag;

  public static final String JSON_PROPERTY_HELP = "help";
  private Boolean help = false;

  public static final String JSON_PROPERTY_JAVASCRIPT = "javascript";
  private Boolean javascript = false;

  public static final String JSON_PROPERTY_REFERRER = "referrer";
  private String referrer;

  public static final String JSON_PROPERTY_CALLBACK_URL = "callback_url";
  private String callbackUrl;

  public static final String JSON_PROPERTY_HOSTED_DOWNLOAD_LIMIT = "hosted_download_limit";
  private Integer hostedDownloadLimit;

  public static final String JSON_PROPERTY_HOSTED_EXPIRES_AT = "hosted_expires_at";
  private String hostedExpiresAt;

  public static final String JSON_PROPERTY_PRINCE_OPTIONS = "prince_options";
  private PrinceOptions princeOptions;

  public static final String JSON_PROPERTY_USER_AGENT_TOKEN = "user_agent_token";
  private String userAgentToken;

  public Doc() {
  }

  public Doc name(String name) {

    this.name = name;
    return this;
  }

   /**
   * A name for identifying your document.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A name for identifying your document.")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public Doc documentType(DocumentTypeEnum documentType) {

    this.documentType = documentType;
    return this;
  }

   /**
   * The type of document being created.
   * @return documentType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The type of document being created.")
  @JsonProperty(JSON_PROPERTY_DOCUMENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public DocumentTypeEnum getDocumentType() {
    return documentType;
  }


  @JsonProperty(JSON_PROPERTY_DOCUMENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDocumentType(DocumentTypeEnum documentType) {
    this.documentType = documentType;
  }


  public Doc documentContent(String documentContent) {

    this.documentContent = documentContent;
    return this;
  }

   /**
   * The HTML data to be transformed into a document. You must supply content using document_content or document_url.
   * @return documentContent
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The HTML data to be transformed into a document. You must supply content using document_content or document_url. ")
  @JsonProperty(JSON_PROPERTY_DOCUMENT_CONTENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDocumentContent() {
    return documentContent;
  }


  @JsonProperty(JSON_PROPERTY_DOCUMENT_CONTENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDocumentContent(String documentContent) {
    this.documentContent = documentContent;
  }


  public Doc documentUrl(String documentUrl) {

    this.documentUrl = documentUrl;
    return this;
  }

   /**
   * The URL to fetch the HTML data to be transformed into a document. You must supply content using document_content or document_url.
   * @return documentUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The URL to fetch the HTML data to be transformed into a document. You must supply content using document_content or document_url. ")
  @JsonProperty(JSON_PROPERTY_DOCUMENT_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDocumentUrl() {
    return documentUrl;
  }


  @JsonProperty(JSON_PROPERTY_DOCUMENT_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDocumentUrl(String documentUrl) {
    this.documentUrl = documentUrl;
  }


  public Doc test(Boolean test) {

    this.test = test;
    return this;
  }

   /**
   * Enable test mode for this document. Test documents are not charged for but include a watermark.
   * @return test
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Enable test mode for this document. Test documents are not charged for but include a watermark.")
  @JsonProperty(JSON_PROPERTY_TEST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getTest() {
    return test;
  }


  @JsonProperty(JSON_PROPERTY_TEST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTest(Boolean test) {
    this.test = test;
  }


  public Doc pipeline(String pipeline) {

    this.pipeline = pipeline;
    return this;
  }

   /**
   * Specify a specific verison of the DocRaptor Pipeline to use.
   * @return pipeline
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specify a specific verison of the DocRaptor Pipeline to use.")
  @JsonProperty(JSON_PROPERTY_PIPELINE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPipeline() {
    return pipeline;
  }


  @JsonProperty(JSON_PROPERTY_PIPELINE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPipeline(String pipeline) {
    this.pipeline = pipeline;
  }


  public Doc strict(StrictEnum strict) {

    this.strict = strict;
    return this;
  }

   /**
   * Force strict HTML validation.
   * @return strict
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Force strict HTML validation.")
  @JsonProperty(JSON_PROPERTY_STRICT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public StrictEnum getStrict() {
    return strict;
  }


  @JsonProperty(JSON_PROPERTY_STRICT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStrict(StrictEnum strict) {
    this.strict = strict;
  }


  public Doc ignoreResourceErrors(Boolean ignoreResourceErrors) {

    this.ignoreResourceErrors = ignoreResourceErrors;
    return this;
  }

   /**
   * Failed loading of images/javascripts/stylesheets/etc. will not cause the rendering to stop.
   * @return ignoreResourceErrors
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Failed loading of images/javascripts/stylesheets/etc. will not cause the rendering to stop.")
  @JsonProperty(JSON_PROPERTY_IGNORE_RESOURCE_ERRORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIgnoreResourceErrors() {
    return ignoreResourceErrors;
  }


  @JsonProperty(JSON_PROPERTY_IGNORE_RESOURCE_ERRORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIgnoreResourceErrors(Boolean ignoreResourceErrors) {
    this.ignoreResourceErrors = ignoreResourceErrors;
  }


  public Doc ignoreConsoleMessages(Boolean ignoreConsoleMessages) {

    this.ignoreConsoleMessages = ignoreConsoleMessages;
    return this;
  }

   /**
   * Prevent console.log from stopping document rendering during JavaScript execution.
   * @return ignoreConsoleMessages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Prevent console.log from stopping document rendering during JavaScript execution.")
  @JsonProperty(JSON_PROPERTY_IGNORE_CONSOLE_MESSAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIgnoreConsoleMessages() {
    return ignoreConsoleMessages;
  }


  @JsonProperty(JSON_PROPERTY_IGNORE_CONSOLE_MESSAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIgnoreConsoleMessages(Boolean ignoreConsoleMessages) {
    this.ignoreConsoleMessages = ignoreConsoleMessages;
  }


  public Doc tag(String tag) {

    this.tag = tag;
    return this;
  }

   /**
   * A field for storing a small amount of metadata with this document.
   * @return tag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A field for storing a small amount of metadata with this document.")
  @JsonProperty(JSON_PROPERTY_TAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTag() {
    return tag;
  }


  @JsonProperty(JSON_PROPERTY_TAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTag(String tag) {
    this.tag = tag;
  }


  public Doc help(Boolean help) {

    this.help = help;
    return this;
  }

   /**
   * Request support help with this request if it succeeds.
   * @return help
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Request support help with this request if it succeeds.")
  @JsonProperty(JSON_PROPERTY_HELP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getHelp() {
    return help;
  }


  @JsonProperty(JSON_PROPERTY_HELP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHelp(Boolean help) {
    this.help = help;
  }


  public Doc javascript(Boolean javascript) {

    this.javascript = javascript;
    return this;
  }

   /**
   * Enable DocRaptor JavaScript parsing. PrinceXML JavaScript parsing is also available elsewhere.
   * @return javascript
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Enable DocRaptor JavaScript parsing. PrinceXML JavaScript parsing is also available elsewhere.")
  @JsonProperty(JSON_PROPERTY_JAVASCRIPT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getJavascript() {
    return javascript;
  }


  @JsonProperty(JSON_PROPERTY_JAVASCRIPT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setJavascript(Boolean javascript) {
    this.javascript = javascript;
  }


  public Doc referrer(String referrer) {

    this.referrer = referrer;
    return this;
  }

   /**
   * Set HTTP referrer when generating this document.
   * @return referrer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Set HTTP referrer when generating this document.")
  @JsonProperty(JSON_PROPERTY_REFERRER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getReferrer() {
    return referrer;
  }


  @JsonProperty(JSON_PROPERTY_REFERRER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReferrer(String referrer) {
    this.referrer = referrer;
  }


  public Doc callbackUrl(String callbackUrl) {

    this.callbackUrl = callbackUrl;
    return this;
  }

   /**
   * A URL that will receive a POST request after successfully completing an asynchronous document. The POST data will include download_url and download_id similar to status API responses. WARNING: this only works on asynchronous documents.
   * @return callbackUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A URL that will receive a POST request after successfully completing an asynchronous document. The POST data will include download_url and download_id similar to status API responses. WARNING: this only works on asynchronous documents. ")
  @JsonProperty(JSON_PROPERTY_CALLBACK_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCallbackUrl() {
    return callbackUrl;
  }


  @JsonProperty(JSON_PROPERTY_CALLBACK_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCallbackUrl(String callbackUrl) {
    this.callbackUrl = callbackUrl;
  }


  public Doc hostedDownloadLimit(Integer hostedDownloadLimit) {

    this.hostedDownloadLimit = hostedDownloadLimit;
    return this;
  }

   /**
   * The number of times a hosted document can be downloaded.  If no limit is specified, the document will be available for an unlimited number of downloads.
   * @return hostedDownloadLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of times a hosted document can be downloaded.  If no limit is specified, the document will be available for an unlimited number of downloads.")
  @JsonProperty(JSON_PROPERTY_HOSTED_DOWNLOAD_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getHostedDownloadLimit() {
    return hostedDownloadLimit;
  }


  @JsonProperty(JSON_PROPERTY_HOSTED_DOWNLOAD_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHostedDownloadLimit(Integer hostedDownloadLimit) {
    this.hostedDownloadLimit = hostedDownloadLimit;
  }


  public Doc hostedExpiresAt(String hostedExpiresAt) {

    this.hostedExpiresAt = hostedExpiresAt;
    return this;
  }

   /**
   * The date and time at which a hosted document will be removed and no longer available. Must be a properly formatted ISO 8601 datetime, like 1981-01-23T08:02:30-05:00.
   * @return hostedExpiresAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date and time at which a hosted document will be removed and no longer available. Must be a properly formatted ISO 8601 datetime, like 1981-01-23T08:02:30-05:00.")
  @JsonProperty(JSON_PROPERTY_HOSTED_EXPIRES_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHostedExpiresAt() {
    return hostedExpiresAt;
  }


  @JsonProperty(JSON_PROPERTY_HOSTED_EXPIRES_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHostedExpiresAt(String hostedExpiresAt) {
    this.hostedExpiresAt = hostedExpiresAt;
  }


  public Doc princeOptions(PrinceOptions princeOptions) {

    this.princeOptions = princeOptions;
    return this;
  }

   /**
   * Get princeOptions
   * @return princeOptions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PRINCE_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PrinceOptions getPrinceOptions() {
    return princeOptions;
  }


  @JsonProperty(JSON_PROPERTY_PRINCE_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrinceOptions(PrinceOptions princeOptions) {
    this.princeOptions = princeOptions;
  }


  public Doc userAgentToken(String userAgentToken) {

    this.userAgentToken = userAgentToken;
    return this;
  }

   /**
   * A token that will be added to the user agent for all requests made for document content while creating a PDF.
   * @return userAgentToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A token that will be added to the user agent for all requests made for document content while creating a PDF.")
  @JsonProperty(JSON_PROPERTY_USER_AGENT_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUserAgentToken() {
    return userAgentToken;
  }


  @JsonProperty(JSON_PROPERTY_USER_AGENT_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserAgentToken(String userAgentToken) {
    this.userAgentToken = userAgentToken;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Doc doc = (Doc) o;
    return Objects.equals(this.name, doc.name) &&
        Objects.equals(this.documentType, doc.documentType) &&
        Objects.equals(this.documentContent, doc.documentContent) &&
        Objects.equals(this.documentUrl, doc.documentUrl) &&
        Objects.equals(this.test, doc.test) &&
        Objects.equals(this.pipeline, doc.pipeline) &&
        Objects.equals(this.strict, doc.strict) &&
        Objects.equals(this.ignoreResourceErrors, doc.ignoreResourceErrors) &&
        Objects.equals(this.ignoreConsoleMessages, doc.ignoreConsoleMessages) &&
        Objects.equals(this.tag, doc.tag) &&
        Objects.equals(this.help, doc.help) &&
        Objects.equals(this.javascript, doc.javascript) &&
        Objects.equals(this.referrer, doc.referrer) &&
        Objects.equals(this.callbackUrl, doc.callbackUrl) &&
        Objects.equals(this.hostedDownloadLimit, doc.hostedDownloadLimit) &&
        Objects.equals(this.hostedExpiresAt, doc.hostedExpiresAt) &&
        Objects.equals(this.princeOptions, doc.princeOptions) &&
        Objects.equals(this.userAgentToken, doc.userAgentToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, documentType, documentContent, documentUrl, test, pipeline, strict, ignoreResourceErrors, ignoreConsoleMessages, tag, help, javascript, referrer, callbackUrl, hostedDownloadLimit, hostedExpiresAt, princeOptions, userAgentToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Doc {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    documentType: ").append(toIndentedString(documentType)).append("\n");
    sb.append("    documentContent: ").append(toIndentedString(documentContent)).append("\n");
    sb.append("    documentUrl: ").append(toIndentedString(documentUrl)).append("\n");
    sb.append("    test: ").append(toIndentedString(test)).append("\n");
    sb.append("    pipeline: ").append(toIndentedString(pipeline)).append("\n");
    sb.append("    strict: ").append(toIndentedString(strict)).append("\n");
    sb.append("    ignoreResourceErrors: ").append(toIndentedString(ignoreResourceErrors)).append("\n");
    sb.append("    ignoreConsoleMessages: ").append(toIndentedString(ignoreConsoleMessages)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    help: ").append(toIndentedString(help)).append("\n");
    sb.append("    javascript: ").append(toIndentedString(javascript)).append("\n");
    sb.append("    referrer: ").append(toIndentedString(referrer)).append("\n");
    sb.append("    callbackUrl: ").append(toIndentedString(callbackUrl)).append("\n");
    sb.append("    hostedDownloadLimit: ").append(toIndentedString(hostedDownloadLimit)).append("\n");
    sb.append("    hostedExpiresAt: ").append(toIndentedString(hostedExpiresAt)).append("\n");
    sb.append("    princeOptions: ").append(toIndentedString(princeOptions)).append("\n");
    sb.append("    userAgentToken: ").append(toIndentedString(userAgentToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

